# 
Integrated code instructions
- You can use "script_settings.cfg" to edit the script parameters,
- To run the full script: "python main.py"
- The project is pushed to Github repo: https://github.com/zakaria47fs/esg-roadmap
- To make parameters edits on "script_settings.cfg" script effective on server, you need to login to the server through RDP (make sure the server instance is running on AWS. Otherwise, you need to connect to AWS and start it), on the server go to the project folder "C:\Users\Administrator\Desktop\Projects\esg-roadmap", and edit the "script_settings.cfg" file

Instructions on how the KPI code functions for 1) % KPIs and 2) numeric/unique KPIs
[To be filled in]

Instructions on how the code works for checking for duplicate sentences
[To be filled in]

Instructions on how the Views work in MySQL Database
[To be filled in]

Location:
host='esgroadmap.cwco2pchjykw.us-east-2.rds.amazonaws.com',
user='admin',
password='hassanarshad1122',
database='esgroadmap'

Access AWS server
log in the aws account. 
Search EC2 and click on the instances.
Check the instance you would like to start and then, on the top right there is a box “instance state”.
Drop-down the options and select “Start instance”


Instructions for operating the AWS server using Amazon EventBridge:
1.To make changes to the instance start and stop schedule, you need to edit the Amazon EventBridge rules associated with the Lambda functions.
2.To do this, go to the AWS Management Console and navigate to the EventBridge service.
3.Under the "Rules" tab, locate the rule associated with the Lambda function you want to modify. In this case, you should see two rules, one for Lambda-Ec2-Start and another for Lambda-Ec2-Stop.
4.Click on the rule for the function you want to modify, and then click on the "Edit" button to modify the rule.
5.Make the necessary changes to the schedule, such as the day of the week or the time of day, and then save the changes.
6.To change the code on the server, you need to first make the changes in your GitHub repository.
7.Once you have made the changes in GitHub, you can export the updated code to the Lambda function.
8.To do this, go to the AWS Management Console and navigate to the Lambda service.
9.Locate the Lambda function you want to update, either Lambda-Ec2-Start or Lambda-Ec2-Stop, and click on its name to open the function configuration.
10.Under the "Code" tab, select the "Code source" option as "Upload from" and then select "GitHub" as the source.
11.Choose the appropriate repository and branch that contains the updated code.
12.Once you have selected the updated code, click "Deploy" to update the Lambda function.
13.After the Lambda function is updated, the changes will take effect on the next scheduled event trigger.
That's it! You have now learned how to operate the AWS server using Amazon EventBridge, modify the schedule for the Lambda functions.


Here are the steps to edit the instance code by uploading it from GitHub:
1.First, navigate to your GitHub repository where the code changes have been committed and pushed.
2.Click on the "Code" button to see the available options for downloading the code.
3.Select the "Download ZIP" option to download the code as a ZIP file.
4.Extract the ZIP file to a local directory on your computer.
5.Next, navigate to the AWS Management Console and go to the EC2 dashboard.
6.Find the instance you want to update and connect to it using Remote Desktop Protocol (RDP).
7.In the EC2 dashboard, select the instance you want to connect to and click on the “Connect” button.
8.In the “Connect To Your Instance” dialog box, select “RDP client” and follow the instructions provided.
9.You will need to download an RDP client if you don’t already have one installed on your computer. An RDP client is a software program that allows you to remotely access and control another computer using the Remote Desktop Protocol.
10.Once you have an RDP client installed, use it to connect to your EC2 instance using the public IP address or DNS name of your instance and the username and password provided in the “Connect To Your Instance” dialog box.
11.The public IP address or DNS name of your instance can be found in the EC2 dashboard by selecting your instance and looking at its description.
12.Once connected via RDP, you will be able to interact with your EC2 instance as if you were sitting in front of it.
Note: since the instance is of Windows as OS of RDP so we can simply connect go to RDP login GitHub and then download zipfile. Afterwards unzip it to the required directory. Let me know if it explains everything.







**How to update python documents on server
**
Remote Desktop connection
password = mN7=K1q-@NVBhw=FiQc1bE$C&Ie?Oo7M
 



Duplicate Remover

1.	This is a Python script that uses the `mysql.connector` library to connect to a MySQL database. The script connects to the database using the provided host, user, password, and database name. It then creates a cursor object to execute SQL queries.

2.	The script first creates a temporary table called `temp_table` that holds the result of a subquery. The subquery selects the minimum id value from the sentence-all table for each combination of Company and Target sentence where there is more than one row with the same values for these two columns.

3.	Next, the script deletes rows from the sentence-all table where the id value is not in the list of id values from the temporary table. This effectively removes duplicate rows from the sentence-all table based on the combination of Company and Target sentence.

4.	Finally, the script drops the temporary table, commits the changes to the database, and closes the cursor and connection objects.



Creation of sentenceallview:

CREATE VIEW sentenceallview AS
SELECT sa.*
cd.Member of the S&P500 AS Member of the S&P500,
cd.Member of the Russell 1000 Index AS Member of the Russell 1000 Index,
cd.Ticker(s),
cd.PR Agency,
cd.Example 2020 company PR agency press release URL AS `Example 2020 company PR agency press release URL`,
cd.Company Global / Main Website URL AS `Company Global / Main Website URL`,
cd.Company global/main press - news release site URL AS `Company global/main press - news release site URL`,
cd.Company annual reports page URL AS `Company annual reports page URL`,
cd.`Company annual / financial report 2020 URL of pdf document` AS `Company annual / financial report 2020 URL of pdf document`,
cd.Company sustainability / ESG reports page URL AS `Company sustainability / ESG reports page URL`,
cd.`Company Sustainability / ESG report 2020 URL of pdf document` AS `Company Sustainability / ESG report 2020 URL of pdf document`,
cd.Country,
cd.`sector code #1 (NAICS)` AS `sector code #1 (NAICS)`,
cd.`sector name #1 (NAICS)` AS `sector name #1 (NAICS)`,
cd.`sector code #2 (NAICS)` AS `sector code #2 (NAICS)`,
cd.`sector name #2 (NAICS)` AS `sector name #2 (NAICS)`,
cd.`sector code #3 (NAICS)` AS `sector code #3 (NAICS)`,
cd.`sector name #3 (NAICS)` AS `sector name #3 (NAICS)`,
cd.`sector code #4 (NAICS)` AS `sector code #4 (NAICS)`,
cd.`sector name #4 (NAICS)` AS `sector name #4 (NAICS)`,
cd.`sector code #5 (NAICS)` AS `sector code #5 (NAICS)`,
cd.`sector name #5 (NAICS)` AS `sector name #5 (NAICS)`,
cd.`sector codes all (NAICS)` AS `sector codes all (NAICS)`,
cd.`sector name all (NAICS)` AS `sector name all (NAICS)`
FROM `sentence-all` sa
JOIN companydata cd
ON sa.company = cd.company;

1.	The code provided creates a view named "sentencaeallview" that selects data from two tables "sentence-all" and "companydata".

2.	The SELECT statement in the view selects all columns from the "sentence-all" table using the "sa.*" notation. It also selects specific columns from the "companydata" table using the "cd.column_name AS alias_name" notation. The alias names are used to rename the column names to more readable and user-friendly names.

3.	The view then joins the two tables on the "company" column using the JOIN statement with the ON clause. The result is a single virtual table that combines the data from both tables.

4.	In summary, the view is a predefined SQL query that selects and combines data from multiple tables into a single virtual table. This allows users to query the view as if it were a table, without having to know the underlying table structure or join conditions.


Creation of sentence_carbon_view:

CREATE VIEW sentence_carbon_view AS
SELECT *
FROM sentenceallview
WHERE `sentence-carbon` = 1;

1.   This code simply provides the the rows where value of `sentence-carbon` = 1.


Unique and Total KPIs Data:

1.	The code connects to a MySQL database using the `mysql.connector` module.
2.	The function `get_column_totals()` is defined, which calculates various totals and unique values for each column in the `sentenceallview` table*.
3.	The columns to be analyzed are defined in a list called `columns`.
4.	A dictionary called `totals` is created to store the results of the calculations.
5.	A loop is run over each column in the `columns` list.
6.	The data type of the column is checked using a SQL query.
7.	If the data type is `tinyint`, two SQL queries are executed to calculate the total number of `1` values and the number of unique `1` values, respectively. The results are added to the `totals` dictionary.
8.	If the column is either `Member of the S&P500` or `Member of the Russell 1000 Index`, two SQL queries are executed to calculate the total number of `yes` values and the number of unique `yes` values, respectively. The results are added to the `totals` dictionary.
9.	If the column is not of type `tinyint` and is not one of the two special columns mentioned above, two SQL queries are executed to calculate the total number of non-null values and the number of unique non-null values, respectively. The results are added to the `totals` dictionary.
10.	The `get_column_totals()` function returns the `totals` dictionary.
11.	The `column_names` list is defined to specify the order in which the columns should appear in the output CSV file.
12.	The current date and time is stored in a string variable called `now`.
13.	The name of the output CSV file is defined in a string variable called `filename`.
14.	The `with` statement is used to open the output CSV file in "append" mode.
15.	A `csv.writer` object is created to write the results to the output CSV file.
16.	The `column_names` list is written to the output CSV file as the header row.
17.	The values from the `totals` dictionary are written to the output CSV file, with the columns in the same order as in the `column_names` list.
18.	The output CSV file is closed.
19.    Email containing the output csv is sent to the specific recipient.

* The `get_column_totals()` function calculates the total number and unique number of non-null values in each column of a database table called "sentenceallview".
The function first connects to the database, then creates a list of column names to analyze. It then loops through each column name in the list and determines its data type by querying the `INFORMATION_SCHEMA.COLUMNS` table in the MySQL database.
Based on the data type, the function calculates the total number and unique number of non-null values in each column by executing SQL queries using the `cursor` object. If the column is a `tinyint` data type, the function calculates the total and unique number of rows that have a value of 1. If the column is a text data type, the function calculates the total and unique number of non-null rows.
Finally, the function returns a dictionary object where the keys are the column names and the values are the calculated total and unique numbers.

Percentages of Database KPIs:

1.	Imports required modules including mysql.connector, csv, datetime, smtplib, email.mime.multipart, email.mime.text, email.mime.application, and os.
2.	Connects to a MySQL database and gets a list of columns of the "sentence-all" table using the `DESCRIBE` statement and stores the column names in a list called `columns`.
3.	Defines a function called `get_column_percentages` that uses the column names obtained from the "sentence-all" table to calculate the percentages of non-null values, "1" values, "yes" or "true" values of specific columns, and stores the percentages in a dictionary. The function then returns the dictionary.
4.	Uses the `get_column_percentages` function to calculate the percentages of the columns of the "sentence-all" table and stores the results in a dictionary called `percentages`.
5.	Generates a timestamp using the `datetime.now().strftime()` function and stores it in a variable called `now`.
6.	Writes the percentages to a CSV file called "Updated__Factors_&_Percentage.csv" using the `csv.writer()` function. If the file does not exist, the function creates the header row.
7.	Creates a table in the MySQL database called "percentageS_table" if it does not exist using a `CREATE TABLE IF NOT EXISTS` statement.
8.	Inserts the percentages into the "percentageS_table" using an `INSERT INTO` statement.
9.	Closes the database connection.
10.	Sends an email to the specified recipient with the CSV file as an attachment using the `smtplib` library.
11.	The `get_column_percentages` function calculates the percentages of non-null values, "1" values, "yes" or "true" values of specific columns of the "sentence-all" table using the following methods:
	•For columns with data type "tinyint", the function calculates the percentage of "1" values.
	•For columns with column names "Member of the S&P500" and "Member of the Russell 1000 Index", the function calculates the percentage of "yes" values.
	•For columns with column name "climateaction100", the function calculates the percentage of "true" values.
	•For all other columns, the function calculates the percentage of non-null values.



